[
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/App.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/api/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/App/App.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/ArtworkCard/ArtworkCard.test.tsx",
        "messages": [
            {
                "ruleId": null,
                "nodeType": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: /mnt/hd/milton/GitHub/art-explorer-react/src/components/ArtworkCard/ArtworkCard.test.tsx was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject."
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import '@testing-library/jest-dom';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { ArtworkCard } from './index';\nimport { MemoryRouter } from 'react-router-dom';\nimport { Artwork } from '../../types';\nimport { FavoritesContext } from '../../store';\n\n// Mocked scrollTo\nwindow.scrollTo = jest.fn();\n\njest.mock('../FavoriteButton', () => ({\n  FavoriteButton: () => <button data-testid=\"favorite-button\">Favorite</button>,\n}));\n\nconst mockNavigate = jest.fn();\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: () => mockNavigate,\n  useLocation: () => ({\n    search: '?page=2&searchTerm=something',\n  }),\n}));\n\nconst mockArtwork: Artwork = {\n  id: 123,\n  title: 'Mona Lisa',\n  artist_title: 'Leonardo da Vinci',\n  main_reference_number: 'INV123',\n  date_display: '1503',\n  place_of_origin: 'Italy',\n  credit_line: 'Louvre Museum',\n  dimensions: '77 cm Ã— 53 cm',\n  image_id: '',\n  thumbnail: {\n    lqip: '',\n    alt_text: 'Mona Lisa alt',\n    height: 300,\n    width: 200,\n  },\n  is_public_domain: true,\n};\n\ndescribe('<ArtworkCard />', () => {\n  it('renders artwork data with placeholder image and public domain tag', () => {\n    render(\n      <FavoritesContext.Provider\n        value={{\n          favoriteArtworks: [],\n          handleFavoriteAdd: jest.fn(),\n          handleFavoriteRemove: jest.fn(),\n        }}\n      >\n        <MemoryRouter>\n          <ArtworkCard artwork={mockArtwork} />\n        </MemoryRouter>\n      </FavoritesContext.Provider>,\n    );\n\n    expect(screen.getByText('Mona Lisa')).toBeInTheDocument();\n    expect(screen.getByText('Leonardo da Vinci')).toBeInTheDocument();\n    expect(screen.getByTestId('public')).toBeInTheDocument();\n    expect(screen.getByTestId('image')).toHaveAttribute(\n      'src',\n      'https://www.shutterstock.com/image-vector/no-painting-sign-forbidden-do-600nw-2647873923.jpg',\n    );\n    expect(screen.getByTestId('favorite-button')).toBeInTheDocument();\n  });\n\n  it('navigates to the correct artwork page on image click', () => {\n    render(\n      <FavoritesContext.Provider\n        value={{\n          favoriteArtworks: [],\n          handleFavoriteAdd: jest.fn(),\n          handleFavoriteRemove: jest.fn(),\n        }}\n      >\n        <MemoryRouter>\n          <ArtworkCard artwork={mockArtwork} />\n        </MemoryRouter>\n      </FavoritesContext.Provider>,\n    );\n\n    const imageButton = screen.getByLabelText('View artwork: Mona Lisa');\n    fireEvent.click(imageButton);\n\n    expect(mockNavigate).toHaveBeenCalledWith({\n      pathname: '/artwork/123',\n      search: 'page=2&artworkId=123',\n    });\n  });\n});\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/ArtworkCard/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/FallbackContent/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/FavoriteButton/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/Footer/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/Header/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/Loader/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/Modal/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/PageLayout/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/Pagination/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/SearchForm/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/SectionLayout/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/Sidebar/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/components/SortControls/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/constants/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/hooks/useDetectOutsideClick.ts",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'onClose'. Either include it or remove the dependency array. If 'onClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
                "line": 24,
                "column": 6,
                "nodeType": "ArrayExpression",
                "endLine": 24,
                "endColumn": 19,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [isOpen, onClose, ref]",
                        "fix": {
                            "range": [
                                610,
                                623
                            ],
                            "text": "[isOpen, onClose, ref]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { RefObject, useEffect } from 'react';\n\ninterface HookProps {\n  ref: RefObject<HTMLElement>;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function useDetectOutsideClick({ ref, isOpen, onClose }: HookProps) {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        isOpen &&\n        ref.current &&\n        !ref.current.contains(event.target as Node)\n      ) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen, ref]);\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/hooks/useFavorites.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/hooks/useFetch.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/main.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/pages/ArtworkPage/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/pages/FavoritesPage/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/pages/HomePage/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/pages/NotFoundPage/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/pages/routes.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/pages/router.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/artworks-context-provider.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/artworks-context.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/contexts/artworks-context.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/contexts/favorites-context.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/contexts/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/favorites-context-provider.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/favorites-context.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/providers/artworks-context-provider.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/providers/favorites-context-provider.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/store/providers/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/types/assets.d.ts",
        "messages": [
            {
                "ruleId": null,
                "nodeType": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: /mnt/hd/milton/GitHub/art-explorer-react/src/types/assets.d.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject."
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "declare module '*.svg' {\n    const content: string;\n    export default content;\n}\n\ndeclare module '*.png' {\n    const content: string;\n    export default content;\n}\n\ndeclare module '*.jpg' {\n    const content: string;\n    export default content;\n}\n\ndeclare module '*.jpeg' {\n    const content: string;\n    export default content;\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/types/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/utils/fetchData/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/utils/sortArtworks/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/utils/sortArtworks/sortArtworks.test.ts",
        "messages": [
            {
                "ruleId": null,
                "nodeType": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: /mnt/hd/milton/GitHub/art-explorer-react/src/utils/sortArtworks/sortArtworks.test.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject."
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { sortArtworks } from './index';\nimport { Artwork } from '../../types';\n\nconst MOCK_ARTWORKS: Artwork[] = [\n  {\n    id: 1,\n    title: 'California',\n    artist_title: 'Maria',\n    main_reference_number: '',\n    date_display: '',\n    place_of_origin: '',\n    credit_line: '',\n    dimensions: '',\n    image_id: '',\n    thumbnail: {\n      lqip: '',\n      width: 100,\n      height: 100,\n      alt_text: '',\n    },\n    is_public_domain: true,\n  },\n  {\n    id: 2,\n    title: 'Apple',\n    artist_title: 'Barry',\n    main_reference_number: '',\n    date_display: '',\n    place_of_origin: '',\n    credit_line: '',\n    dimensions: '',\n    image_id: '',\n    thumbnail: {\n      lqip: '',\n      width: 100,\n      height: 100,\n      alt_text: '',\n    },\n    is_public_domain: true,\n  },\n  {\n    id: 3,\n    title: 'Apple',\n    artist_title: 'Maria',\n    main_reference_number: '',\n    date_display: '',\n    place_of_origin: '',\n    credit_line: '',\n    dimensions: '',\n    image_id: '',\n    thumbnail: {\n      lqip: '',\n      width: 100,\n      height: 100,\n      alt_text: '',\n    },\n    is_public_domain: true,\n  },\n  {\n    id: 4,\n    title: 'Capture',\n    artist_title: 'Vincent',\n    main_reference_number: '',\n    date_display: '',\n    place_of_origin: '',\n    credit_line: '',\n    dimensions: '',\n    image_id: '',\n    thumbnail: {\n      lqip: '',\n      width: 100,\n      height: 100,\n      alt_text: '',\n    },\n    is_public_domain: true,\n  },\n  {\n    id: 5,\n    title: 'Zummer',\n    artist_title: null,\n    main_reference_number: '',\n    date_display: '',\n    place_of_origin: '',\n    credit_line: '',\n    dimensions: '',\n    image_id: '',\n    thumbnail: {\n      lqip: '',\n      width: 100,\n      height: 100,\n      alt_text: '',\n    },\n    is_public_domain: true,\n  },\n  {\n    id: 6,\n    title: 'Amending',\n    artist_title: null,\n    main_reference_number: '',\n    date_display: '',\n    place_of_origin: '',\n    credit_line: '',\n    dimensions: '',\n    image_id: '',\n    thumbnail: {\n      lqip: '',\n      width: 100,\n      height: 100,\n      alt_text: '',\n    },\n    is_public_domain: true,\n  },\n];\n\ndescribe('sortArtworks', () => {\n  it('should sort artworks by artist_title in ascending order', () => {\n    const sortedArtworks = sortArtworks(MOCK_ARTWORKS, 'artist-asc');\n\n    expect(sortedArtworks[0].artist_title).toBe('Barry');\n    expect(sortedArtworks[1].artist_title).toBe('Maria');\n    expect(sortedArtworks[2].artist_title).toBe('Maria');\n    expect(sortedArtworks[3].artist_title).toBe('Vincent');\n    expect(sortedArtworks[4].artist_title).toBeNull();\n    expect(sortedArtworks[5].artist_title).toBeNull();\n  });\n\n  it('should sort artworks by artist_title in descending order', () => {\n    const sortedArtworks = sortArtworks(MOCK_ARTWORKS, 'artist-desc');\n\n    expect(sortedArtworks[0].artist_title).toBe('Vincent');\n    expect(sortedArtworks[1].artist_title).toBe('Maria');\n    expect(sortedArtworks[2].artist_title).toBe('Maria');\n    expect(sortedArtworks[3].artist_title).toBe('Barry');\n    expect(sortedArtworks[4].artist_title).toBeNull();\n    expect(sortedArtworks[5].artist_title).toBeNull();\n  });\n\n  it('should sort artworks by title in ascending order', () => {\n    const sortedArtworks = sortArtworks(MOCK_ARTWORKS, 'title-asc');\n\n    expect(sortedArtworks[0].title).toBe('Amending');\n    expect(sortedArtworks[1].title).toBe('Apple');\n    expect(sortedArtworks[2].title).toBe('Apple');\n    expect(sortedArtworks[3].title).toBe('California');\n    expect(sortedArtworks[4].title).toBe('Capture');\n    expect(sortedArtworks[5].title).toBe('Zummer');\n  });\n\n  it('should sort artworks by title in descending order', () => {\n    const sortedArtworks = sortArtworks(MOCK_ARTWORKS, 'title-desc');\n\n    expect(sortedArtworks[0].title).toBe('Zummer');\n    expect(sortedArtworks[1].title).toBe('Capture');\n    expect(sortedArtworks[2].title).toBe('California');\n    expect(sortedArtworks[3].title).toBe('Apple');\n    expect(sortedArtworks[4].title).toBe('Apple');\n    expect(sortedArtworks[5].title).toBe('Amending');\n  });\n\n  it('should return the original array if criteria is unknown', () => {\n    const sortedArtworks = sortArtworks(MOCK_ARTWORKS, 'unknown-criteria');\n    expect(sortedArtworks).toEqual(MOCK_ARTWORKS);\n  });\n});\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/utils/validationFunctions/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/utils/validationFunctions/validationFunction.test.ts",
        "messages": [
            {
                "ruleId": null,
                "nodeType": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: /mnt/hd/milton/GitHub/art-explorer-react/src/utils/validationFunctions/validationFunction.test.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject."
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import {\n  IS_NOT_EMPTY_ERROR_VALUE,\n  HAS_LETTERS_OR_NUMBERS_ERROR_VALUE,\n} from '../../constants';\nimport { isNotEmpty, hasLettersOrNumbers, validateInput } from './index';\n\ndescribe('isNotEmpty', () => {\n  it('should return an error message if the input is less than 3 characters', () => {\n    expect(isNotEmpty('')).toEqual(IS_NOT_EMPTY_ERROR_VALUE);\n    expect(isNotEmpty('a')).toEqual(IS_NOT_EMPTY_ERROR_VALUE);\n    expect(isNotEmpty('ab')).toEqual(IS_NOT_EMPTY_ERROR_VALUE);\n  });\n\n  it('should return an empty array if the input has at least 3 characters', () => {\n    expect(isNotEmpty('abc')).toEqual([]);\n    expect(isNotEmpty('abcd')).toEqual([]);\n  });\n});\n\ndescribe('hasLettersOrNumbers', () => {\n  it('should return an error message if the input does not include letters or numbers', () => {\n    expect(hasLettersOrNumbers('**/')).toEqual(\n      HAS_LETTERS_OR_NUMBERS_ERROR_VALUE,\n    );\n  });\n\n  it('should return an empty array if the input includes letters or numbers', () => {\n    expect(hasLettersOrNumbers('abc')).toEqual([]);\n    expect(hasLettersOrNumbers('123')).toEqual([]);\n    expect(hasLettersOrNumbers('abc123')).toEqual([]);\n    expect(hasLettersOrNumbers('a!2')).toEqual([]);\n  });\n});\n\ndescribe('validateInput', () => {\n  it('should return an empty array if the input is an empty string after trimming', () => {\n    expect(validateInput('')).toEqual([]);\n    expect(validateInput('   ')).toEqual([]);\n  });\n\n  it('should return errors from isNotEmpty and hasLettersOrNumbers if input is invalid', () => {\n    expect(validateInput('ab')).toEqual(IS_NOT_EMPTY_ERROR_VALUE);\n    expect(validateInput('a!')).toEqual(IS_NOT_EMPTY_ERROR_VALUE);\n    expect(validateInput('!!!')).toEqual(HAS_LETTERS_OR_NUMBERS_ERROR_VALUE);\n    expect(validateInput('!!')).toEqual([\n      ...IS_NOT_EMPTY_ERROR_VALUE,\n      ...HAS_LETTERS_OR_NUMBERS_ERROR_VALUE,\n    ]);\n  });\n\n  it('should return an empty array if the input is valid', () => {\n    expect(validateInput('fwt')).toEqual([]);\n    expect(validateInput('qzc569')).toEqual([]);\n    expect(validateInput('a!2')).toEqual([]);\n  });\n});\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/mnt/hd/milton/GitHub/art-explorer-react/src/vite-env.d.ts",
        "messages": [
            {
                "ruleId": null,
                "nodeType": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: /mnt/hd/milton/GitHub/art-explorer-react/src/vite-env.d.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject."
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "/// <reference types=\"vite/client\" />\n",
        "usedDeprecatedRules": []
    }
]